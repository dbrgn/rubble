var searchIndex={};
searchIndex["rubble"] = {"doc":"An experimental BLE stack.","i":[[4,"Error","rubble","Errors returned by the BLE stack.",null,null],[13,"InvalidLength","","Packet specified an invalid length value or was too short.",0,null],[13,"InvalidValue","","Invalid value supplied for field.",0,null],[13,"Eof","","Unexpectedly reached EOF while reading or writing data.",0,null],[13,"IncompleteParse","","Parsing didn't consume the entire buffer.",0,null],[0,"att","","Implementation of the Attribute Protocol (ATT).",null,null],[3,"Handle","rubble::att","A 16-bit handle uniquely identifying an attribute on an…",null,null],[3,"HandleRange","","A (de)serializable handle range that has been checked for…",null,null],[3,"AttributeServer","","An Attribute Protocol server providing read and write…",null,null],[3,"AttributeServerTx","","An ATT server handle that can send packets and initiate…",null,null],[3,"Attribute","","An ATT server attribute",null,null],[12,"att_type","","The type of the attribute as a UUID16, EG \"Primary…",1,null],[12,"handle","","Unique server-side identifer for attribute",1,null],[12,"value","","Attribute values can be any fixed length or variable…",1,null],[3,"NoAttributes","","An empty attribute set.",null,null],[4,"AttUuid","","ATT protocol UUID (either a 16 or a 128-bit UUID).",null,null],[13,"Uuid16","","",2,null],[13,"Uuid128","","",2,null],[18,"NULL","","The `0x0000` handle is not used for actual attributes, but…",3,null],[11,"as_u16","","Returns the raw 16-bit integer representing this handle.",3,[[["self"]],["u16"]]],[11,"from_raw","","Create an attribute handle from a raw u16",3,[[["u16"]],["self"]]],[11,"new","","",4,[[["handle"]],["self"]]],[11,"contains","","Checks if an Handle is in a HandleRange",4,[[["self"],["handle"]],["bool"]]],[11,"start","","Returns the lowest attribute handle value included in the…",4,[[["self"]],["handle"]]],[11,"end","","Returns the last (highest) attribute handle value included…",4,[[["self"]],["handle"]]],[11,"new","","Creates an `AttributeServer` hosting attributes from an…",5,[[["a"]],["self"]]],[11,"with_sender","","Prepares for performing a server-initiated action (eg.…",5,[[["self"],["sender"]],["attributeservertx"]]],[11,"notify_raw","","Sends an attribute value notification to the connected…",6,[[["handle"]]]],[8,"AttributeProvider","","Trait for attribute sets that can be hosted by an…",null,null],[10,"for_attrs_in_range","","Calls a closure `f` with every attribute whose handle is…",7,[[["handlerange"],["self"]],[["result",["error"]],["error"]]]],[10,"is_grouping_attr","","Returns whether `uuid` is a valid grouping attribute type…",7,[[["attuuid"],["self"]],["bool"]]],[10,"group_end","","Queries the last attribute that is part of the attribute…",7,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[0,"beacon","rubble","BLE beacon support, without dealing with Link-Layer stuff.",null,null],[3,"Beacon","rubble::beacon","A BLE beacon.",null,null],[3,"BeaconScanner","","A passive scanner for non-connectable beacon advertisements.",null,null],[8,"ScanCallback","","Callback for the `BeaconScanner`.",null,null],[10,"beacon","","Called when a beacon is received and has passed the…",8,[[["self"],["deviceaddress"],["i"]]]],[11,"new","","Creates a new beacon that will broadcast a packet on all…",9,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"broadcast","","Broadcasts the beacon data using `tx`.",9,[[["self"],["t"]]]],[11,"new","","Creates a `BeaconScanner` that will report beacons from…",10,[[["c"]],["self"]]],[11,"with_filter","","Creates a `BeaconScanner` with a custom device filter.",10,[[["c"],["f"]],["self"]]],[11,"configure","","Configures the `BeaconScanner` and returns a `Cmd` to…",10,[[["duration"],["self"],["instant"]],["cmd"]]],[11,"timer_update","","Updates the `BeaconScanner` after the configured timer has…",10,[[["self"],["instant"]],["cmd"]]],[11,"process_adv_packet","","Processes a received advertising channel packet.",10,[[["header"],["self"],["bool"]],["cmd"]]],[0,"bytes","rubble","Utilities for decoding from and encoding into bytes.",null,null],[3,"BytesOr","rubble::bytes","Reference to a `T`, or to a byte slice that can be decoded…",null,null],[3,"ByteWriter","","Wrapper around a byte slice that can be used to encode…",null,null],[3,"ByteReader","","Allows reading values from a borrowed byte slice.",null,null],[8,"ToBytes","","Trait for encoding a value into a byte buffer.",null,null],[10,"to_bytes","","Converts `self` to bytes and writes them into `writer`,…",11,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[8,"FromBytes","","Trait for decoding values from a byte slice.",null,null],[10,"from_bytes","","Decode a `Self` from a byte slice, advancing `bytes` to…",12,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_ref","","Creates a `BytesOr` that holds on to a `T` via reference.",13,[[["t"]],["self"]]],[11,"read","","Reads the `T`, possibly by parsing the stored bytes.",13,[[["self"]],["t"]]],[11,"iter","","Returns an iterator over all `T`s stored in `self` (which…",13,[[["self"]]]],[11,"iter","","Returns an iterator over all `T`s stored in `self`.",13,[[["self"]]]],[11,"new","","Creates a writer that will write to `buf`.",14,[[],["self"]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",14,[[]]],[11,"rest","","Returns the raw buffer this `ByteWriter` would write to.",14,[[["self"]]]],[11,"skip","","Skips the given number of bytes in the output data without…",14,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"split_off","","Creates and returns another `ByteWriter` that can write to…",14,[[["self"],["usize"]],[["error"],["result",["error"]]]]],[11,"split_next_mut","","Splits off the next byte in the buffer.",14,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"space_left","","Returns the number of bytes that can be written to `self`…",14,[[["self"]],["usize"]]],[11,"write_slice","","Writes all bytes from `other` to `self`.",14,[[["self"]],[["result",["error"]],["error"]]]],[11,"write_slice_truncate","","Writes as many bytes as can fit from `other` into `self`.",14,[[["self"]],["usize"]]],[11,"write_u8","","Writes a single byte to `self`.",14,[[["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"write_u16_le","","Writes a `u16` to `self`, using Little Endian byte order.",14,[[["u16"],["self"]],[["result",["error"]],["error"]]]],[11,"write_u32_le","","Writes a `u32` to `self`, using Little Endian byte order.",14,[[["self"],["u32"]],[["result",["error"]],["error"]]]],[11,"write_u64_le","","Writes a `u64` to `self`, using Little Endian byte order.",14,[[["self"],["u64"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a new `ByteReader` that will read from the given…",15,[[],["self"]]],[11,"as_raw_bytes","","Returns a reference to the raw bytes in `self`, without…",15,[[["self"]]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",15,[[]]],[11,"skip","","Skips the given number of bytes in the input data without…",15,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"split_off","","Creates and returns another `ByteReader` that will read…",15,[[["self"],["usize"]],[["error"],["result",["error"]]]]],[11,"bytes_left","","Returns the number of bytes that can still be read from…",15,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether `self` is at the end of the underlying…",15,[[["self"]],["bool"]]],[11,"read_slice","","Reads a byte slice of length `len` from `self`.",15,[[["self"],["usize"]],[["error"],["result",["error"]]]]],[11,"read_array","","Reads a byte-array-like type `S` from `self`.",15,[[["self"]],[["result",["error"]],["error"]]]],[11,"read_rest","","Reads the remaining bytes from `self`.",15,[[["self"]]]],[11,"read_u8","","Reads a single byte from `self`.",15,[[["self"]],[["result",["u8","error"]],["error"],["u8"]]]],[11,"read_u16_le","","Reads a `u16` from `self`, using Little Endian byte order.",15,[[["self"]],[["u16"],["error"],["result",["u16","error"]]]]],[11,"read_u32_le","","Reads a `u32` from `self`, using Little Endian byte order.",15,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"read_u64_le","","Reads a `u64` from `self`, using Little Endian byte order.",15,[[["self"]],[["result",["u64","error"]],["u64"],["error"]]]],[0,"config","rubble","Stack configuration trait.",null,null],[8,"Config","rubble::config","Trait for Rubble stack configurations.",null,null],[16,"Timer","","A time source with microsecond resolution.",16,null],[16,"Transmitter","","The BLE packet transmitter (radio).",16,null],[16,"ChannelMapper","","The L2CAP channel mapper in use.",16,null],[16,"PacketQueue","","The packet queue to use for exchanging data between the…",16,null],[0,"gatt","rubble","Implementation of the Generic Attribute Profile (GATT).",null,null],[3,"BatteryServiceAttrs","rubble::gatt","A demo `AttributeProvider` that will enumerate as a…",null,null],[3,"Attributes","","",null,null],[3,"MidiServiceAttrs","","A demo `AttributeProvider` that will enumerate as a Midi…",null,null],[0,"characteristic","","",null,null],[3,"Properties","rubble::gatt::characteristic","",null,null],[3,"BatteryLevel","","",null,null],[4,"Appearance","","",null,null],[13,"Unknown","","",17,null],[13,"GenericPhone","","",17,null],[13,"GenericComputer","","",17,null],[13,"GenericWatch","","",17,null],[13,"SportsWatch","","",17,null],[13,"GenericClock","","",17,null],[13,"GenericDisplay","","",17,null],[13,"GenericRemoteControl","","",17,null],[13,"GenericEyeGlasses","","",17,null],[13,"GenericTag","","",17,null],[13,"GenericKeyring","","",17,null],[13,"GenericMediaPlayer","","",17,null],[13,"GenericBarcodeScanner","","",17,null],[13,"GenericThermometer","","",17,null],[13,"ThermometerEar","","",17,null],[13,"GenericHeartRateSensor","","",17,null],[13,"HeartRateBelt","","",17,null],[13,"GenericBloodPressure","","",17,null],[13,"BloodPressureArm","","",17,null],[13,"BloodPressureWrist","","",17,null],[13,"HumanInterfaceDevice","","",17,null],[13,"Keyboard","","",17,null],[13,"Mouse","","",17,null],[13,"Joystick","","",17,null],[13,"Gamepad","","",17,null],[13,"DigitizerTablet","","",17,null],[13,"CardReader","","",17,null],[13,"DigitalPen","","",17,null],[13,"BarcodeScanner","","",17,null],[13,"GenericGlucoseMeter","","",17,null],[13,"GenericRunningWalkingSensor","","",17,null],[13,"RunningWalkingSensorInShoe","","",17,null],[13,"RunningWalkingSensorOnShoe","","",17,null],[13,"RunningWalkingSensorOnHip","","",17,null],[13,"GenericCycling","","",17,null],[13,"CyclingComputer","","",17,null],[13,"CyclingSpeedSensor","","",17,null],[13,"CyclingCadenceSensor","","",17,null],[13,"CyclingPowerSensor","","",17,null],[13,"CyclingSpeedAndCadenceSensor","","",17,null],[13,"GenericPulseOximeter","","",17,null],[13,"PulseOximeterFingertip","","",17,null],[13,"PulseOximeterWristWorn","","",17,null],[13,"GenericWeightScale","","",17,null],[13,"GenericPersonalMobilityDevice","","",17,null],[13,"PoweredWheelchair","","",17,null],[13,"MobilityScooter","","",17,null],[13,"GenericContinuousGlucoseMonitor","","",17,null],[13,"GenericInsulinPump","","",17,null],[13,"DurableInsulinPump","","",17,null],[13,"PatchInsulingPump","","",17,null],[13,"InsulinPen","","",17,null],[13,"GenericMedicationDelivery","","",17,null],[13,"GenericOutdoorSportsActivity","","",17,null],[13,"LocationDisplayService","","",17,null],[13,"LocationAndNavigationDisplayService","","",17,null],[13,"LocationPod","","",17,null],[13,"LocationAndNavigationPod","","",17,null],[8,"Characteristic","","",null,null],[18,"PROPS","","",18,null],[18,"UUID","","The UUID assigned to the characteristic type.",18,null],[18,"BROADCAST","","",19,null],[18,"READ","","",19,null],[18,"WRITE_NO_RSP","","",19,null],[18,"WRITE","","",19,null],[18,"NOTIFY","","",19,null],[18,"INDICATE","","",19,null],[18,"AUTH_WRITES","","",19,null],[18,"EXTENDED","","",19,null],[11,"empty","","Returns an empty set of flags",19,[[],["properties"]]],[11,"all","","Returns the set containing all flags.",19,[[],["properties"]]],[11,"bits","","Returns the raw value of the flags currently stored.",19,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",19,[[["u8"]],[["properties"],["option",["properties"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",19,[[["u8"]],["properties"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",19,[[["u8"]],["properties"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",19,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",19,[[["properties"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",19,[[["properties"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",19,[[["self"],["properties"]]]],[11,"remove","","Removes the specified flags in-place.",19,[[["self"],["properties"]]]],[11,"toggle","","Toggles the specified flags in-place.",19,[[["self"],["properties"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",19,[[["self"],["properties"],["bool"]]]],[11,"new","","",20,[[["u8"]],["self"]]],[11,"percentage","","",20,[[["self"]],["u8"]]],[11,"new","rubble::gatt","",21,[[],["self"]]],[11,"new","","",22,[[],["self"]]],[0,"l2cap","rubble","The Logical Link Control and Adaptation Protocol (L2CAP).",null,null],[3,"Channel","rubble::l2cap","An L2CAP channel identifier (CID).",null,null],[3,"ChannelData","","Data associated with a connected L2CAP channel.",null,null],[3,"BleChannelMap","","A fixed BLE channel map that provides only the required…",null,null],[3,"L2CAPState","","L2CAP channel manager and responder.",null,null],[3,"Sender","","Provides a way to send a L2CAP message with preallocated…",null,null],[3,"L2CAPStateTx","","An `L2CAPState` with the ability to transmit packets.",null,null],[8,"ChannelMapper","","Trait for L2CAP channel mappers that provide access to the…",null,null],[16,"AttributeProvider","","The attribute provider used by the ATT server.",23,null],[10,"lookup","","Look up what's connected to `channel` (eg. the `Protocol`…",23,[[["self"],["channel"]],[["channeldata",["protocolobj"]],["option",["channeldata"]]]]],[10,"att","","Returns information about the Attribute Protocol on…",23,[[["self"]],[["attributeserver"],["channeldata",["attributeserver"]]]]],[8,"ProtocolObj","","Trait for protocols that sit on top of L2CAP (object-safe…",null,null],[10,"process_message","","Process a message sent to the protocol.",24,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[8,"Protocol","","Trait for protocols that sit on top of L2CAP…",null,null],[18,"RSP_PDU_SIZE","","Minimum size needed by PDUs sent by this protocol.",25,null],[18,"NULL","","The null channel identifier. Must not be used as a…",26,null],[18,"ATT","","The channel used by the Attribute Protocol (ATT).",26,null],[18,"LE_SIGNALING","","LE L2CAP signaling channel (connectionless).",26,null],[18,"LE_SECURITY_MANAGER","","LE Security Manager channel.",26,null],[11,"as_raw","","Returns the channel identifier (CID) as a raw `u16`.",26,[[["self"]],["u16"]]],[11,"is_connection_oriented","","Returns whether this channel is connection-oriented.",26,[[["self"]],["bool"]]],[11,"is_connectionless","","Returns whether this channel is connectionless.",26,[[["self"]],["bool"]]],[11,"response_channel","","Returns the `Channel` to which the response should be sent.",27,[[["self"]],["channel"]]],[11,"pdu_size","","Returns the PDU size required by the protocol.",27,[[["self"]],["u8"]]],[11,"protocol","","Returns the protocol connected to the channel.",27,[[["self"]],["p"]]],[11,"into_protocol","","Consumes `self` and returns the protocol connected to the…",27,[[],["p"]]],[11,"empty","","Creates a new channel map with no backing data for the…",28,[[],["self"]]],[11,"with_attributes","","",28,[[["a"]],["self"]]],[11,"new","","Creates a new L2CAP state using the given channel…",29,[[["m"]],["self"]]],[11,"tx","","Gives this instance the ability to transmit packets.",29,[[["self"],["p"]],[["producer"],["l2capstatetx"]]]],[11,"send","","Enqueues an L2CAP message to be sent over the data…",30,[[["self"],["tobytes"]],[["result",["error"]],["error"]]]],[11,"send_with","","Enqueues an L2CAP message encoded by a closure.",30,[[["self"]],["result"]]],[11,"process_start","","Process the start of a new L2CAP message (or a complete,…",31,[[["self"]],["consume"]]],[11,"process_cont","","Process continuation of an L2CAP message.",31,[[["self"]],["consume"]]],[11,"att","","Prepares for sending data using the Attribute Protocol.",31,[[["self"]],[["attributeservertx"],["option",["attributeservertx"]]]]],[0,"link","rubble","Link-Layer.",null,null],[3,"CompanyId","rubble::link","Company identifier for use in link layer Control PDUs.",null,null],[3,"Connection","","Connection state and parameters.",null,null],[3,"DeviceAddress","","A Bluetooth device address.",null,null],[3,"FeatureSet","","A set of optional Link Layer features.",null,null],[3,"Responder","","Data channel packet processor.",null,null],[3,"LinkLayer","","Implementation of the real-time BLE Link-Layer logic.",null,null],[3,"Cmd","","Command returned by the Link-Layer to the user.",null,null],[12,"radio","","Radio configuration request.",32,null],[12,"next_update","","Time until `LinkLayer::update` should be called.",32,null],[12,"queued_work","","Whether the Link-Layer code has enqueued more work into…",32,null],[4,"AddressKind","","Specifies whether a device address is randomly generated…",null,null],[13,"Public","","Publicly registered IEEE 802-2001 LAN MAC address.",33,null],[13,"Random","","Randomly generated address.",33,null],[4,"NextUpdate","","Specifies when the Link Layer's `update` method should be…",null,null],[13,"Disable","","Disable timer and do not call `update`.",34,null],[13,"Keep","","Keep the previously configured time.",34,null],[13,"At","","Call `update` at the given `Instant`.",34,null],[4,"RadioCmd","","Specifies if and how the radio should listen for…",null,null],[13,"Off","","Turn the radio off and don't call `LinkLayer::process_*`…",35,null],[13,"ListenAdvertising","","Listen on an advertising channel. If a packet is received,…",35,null],[12,"channel","rubble::link::RadioCmd","The advertising channel to listen on.",36,null],[13,"ListenData","rubble::link","Listen on a data channel. If a matching packet is…",35,null],[12,"channel","rubble::link::RadioCmd","The data channel to listen on.",37,null],[12,"access_address","","The Access Address to listen for.",37,null],[12,"crc_init","","Initialization value of the CRC-24 calculation.",37,null],[12,"timeout","","Flag to indicate if the last connection event timed out.",37,null],[0,"ad_structure","rubble::link","Advertising Data / Extended Inquiry Response (EIR) data.",null,null],[3,"ServiceUuids","rubble::link::ad_structure","List of service UUIDs offered by the device.",null,null],[3,"Flags","","BR/EDR and LE compatibility flags.",null,null],[4,"AdStructure","","A list of AD structures can be sent along with an…",null,null],[13,"Flags","","Device flags and baseband capabilities.",38,null],[13,"ServiceUuids16","","",38,null],[13,"ServiceUuids32","","",38,null],[13,"ServiceUuids128","","",38,null],[13,"ServiceData16","","Service data with 16-bit service UUID.",38,null],[12,"uuid","rubble::link::ad_structure::AdStructure","The 16-bit service UUID.",39,null],[12,"data","","The associated service data. May be empty.",39,null],[13,"CompleteLocalName","rubble::link::ad_structure","Sets the full (unabbreviated) device name.",38,null],[13,"ShortenedLocalName","","Sets the shortened device name.",38,null],[13,"Unknown","","An unknown or unimplemented AD structure stored as raw…",38,null],[12,"ty","rubble::link::ad_structure::AdStructure","Type byte.",40,null],[12,"data","","Raw data transmitted after the type.",40,null],[11,"from_uuids","rubble::link::ad_structure","Creates a `ServiceUuids` container from a list of UUIDs.",41,[[["bool"]],["self"]]],[11,"is_complete","","Returns a boolean indicating whether this list is complete.",41,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the UUIDs stored in `self`.",41,[[["self"]]]],[18,"LE_LIMITED_DISCOVERABLE","","",42,null],[18,"LE_GENERAL_DISCOVERABLE","","",42,null],[18,"BR_EDR_NOT_SUPPORTED","","",42,null],[18,"SIMUL_LE_BR_CONTROLLER","","",42,null],[18,"SIMUL_LE_BR_HOST","","",42,null],[11,"empty","","Returns an empty set of flags",42,[[],["flags"]]],[11,"all","","Returns the set containing all flags.",42,[[],["flags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",42,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",42,[[["u8"]],[["option",["flags"]],["flags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",42,[[["u8"]],["flags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",42,[[["u8"]],["flags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",42,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",42,[[["flags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",42,[[["flags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",42,[[["self"],["flags"]]]],[11,"remove","","Removes the specified flags in-place.",42,[[["self"],["flags"]]]],[11,"toggle","","Toggles the specified flags in-place.",42,[[["self"],["flags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",42,[[["self"],["flags"],["bool"]]]],[11,"discoverable","","Returns flags suitable for discoverable devices that want…",42,[[],["flags"]]],[11,"broadcast","","Returns flags suitable for non-connectable devices that…",42,[[],["flags"]]],[11,"to_u8","","Returns the raw representation of the flags.",42,[[],["u8"]]],[11,"supports_classic_bluetooth","","Returns a boolean indicating whether the device that sent…",42,[[["self"]],["bool"]]],[11,"le_limited_discoverable","","Device operating in LE Limited Discoverable mode.",42,[[["self"]],["bool"]]],[11,"le_general_discoverable","","Device operating in LE General Discoverable mode.",42,[[["self"]],["bool"]]],[0,"advertising","rubble::link","Advertising channel operations.",null,null],[3,"ConnectRequestData","rubble::link::advertising","Connection parameters sent along with a `ConnectRequest`…",null,null],[3,"PduBuf","","Stores an advertising channel PDU.",null,null],[3,"Header","","16-bit Advertising Channel PDU header preceding the Payload.",null,null],[4,"Pdu","","A parsed advertising channel PDU.",null,null],[13,"ConnectableUndirected","","Connectable and scannable advertisement.",43,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",44,null],[12,"advertising_data","","AD structures sent along with the advertisement.",44,null],[13,"ConnectableDirected","rubble::link::advertising","Directed connectable advertisement sent to an initiator.",43,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",45,null],[12,"initiator_addr","","Intended receiver of the advertisement.",45,null],[13,"NonconnectableUndirected","rubble::link::advertising","A non-connectable undirected advertisement (aka \"beacon\").",43,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device (beacon) that is sending…",46,null],[12,"advertising_data","","AD structures sent along with the advertisement.",46,null],[13,"ScannableUndirected","rubble::link::advertising","Scannable advertisement.",43,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",47,null],[12,"advertising_data","","AD structures sent along with the advertisement.",47,null],[13,"ScanRequest","rubble::link::advertising","Scan request sent from a scanner to an advertising device.",43,null],[12,"scanner_addr","rubble::link::advertising::Pdu","Address of the scanning device sending this PDU.",48,null],[12,"advertiser_addr","","Address of the advertising device that should be scanned.",48,null],[13,"ScanResponse","rubble::link::advertising","Response to a scan request, sent by the scanned…",43,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that responds to a scan…",49,null],[12,"scan_data","","Scan data payload, consisting of additional user-defined…",49,null],[13,"ConnectRequest","rubble::link::advertising","A request to establish a connection, sent by an initiating…",43,null],[12,"initiator_addr","rubble::link::advertising::Pdu","Address of the device initiating the connection by sending…",50,null],[12,"advertiser_addr","","Address of the intended receiver of this packet.",50,null],[12,"lldata","","Connection parameters.",50,null],[4,"SleepClockAccuracy","rubble::link::advertising","Indicates the master's sleep clock accuracy (SCA) in ppm…",null,null],[13,"Ppm251To500","","",51,null],[13,"Ppm151To250","","",51,null],[13,"Ppm101To150","","",51,null],[13,"Ppm76To100","","",51,null],[13,"Ppm51To75","","",51,null],[13,"Ppm31To50","","",51,null],[13,"Ppm21To30","","",51,null],[13,"Ppm0To20","","",51,null],[4,"PduType","","4-bit PDU type in [`Header`].",null,null],[13,"AdvInd","","Connectable undirected advertising event (`ADV_IND`).",52,null],[13,"AdvDirectInd","","Connectable directed advertising event (`ADV_DIRECT_IND`).",52,null],[13,"AdvNonconnInd","","Non-connectable undirected advertising event…",52,null],[13,"AdvScanInd","","Scannable undirected advertising event (`ADV_SCAN_IND`).",52,null],[13,"ScanReq","","Scan request (`SCAN_REQ`).",52,null],[13,"ScanRsp","","Scan response (`SCAN_RSP`).",52,null],[13,"ConnectReq","","Connect request (`CONNECT_REQ`).",52,null],[13,"Unknown","","",52,null],[17,"CRC_PRESET","","CRC initialization value for advertising channel packets.",null,null],[17,"MAX_PAYLOAD_SIZE","","Max. advertising PDU payload size in Bytes.",null,null],[17,"ACCESS_ADDRESS","","Access Address to use for all advertising channel packets.",null,null],[11,"from_header_and_payload","","Constructs a PDU by parsing `payload`.",43,[[["header"],["bytereader"]],[["error"],["result",["error"]]]]],[11,"sender","","Returns the device address of the sender of this PDU.",43,[[["self"]],["deviceaddress"]]],[11,"receiver","","Returns the intended receiver of this PDU.",43,[[["self"]],[["deviceaddress"],["option",["deviceaddress"]]]]],[11,"ty","","Returns the PDU type of `self`.",43,[[["self"]],["pdutype"]]],[11,"advertising_data","","Returns an iterator over all AD structures encoded in the…",43,[[["self"]],["option"]]],[11,"access_address","","Returns the Access Address to use for data channel…",53,[[["self"]],["u32"]]],[11,"crc_init","","Returns the initialization value for the CRC calculation.",53,[[["self"]],["u32"]]],[11,"channel_map","","Returns the channel map specified by the initiator.",53,[[["self"]],["channelmap"]]],[11,"hop","","Returns the channel hop distance.",53,[[["self"]],["u8"]]],[11,"end_of_tx_window","","Returns the end of the transmit window from reception of…",53,[[["self"]],["duration"]]],[11,"interval","","Returns the connection event interval in µs.",53,[[["self"]],["duration"]]],[11,"slave_latency","","Returns the slave latency (as the number of connection…",53,[[["self"]],["u16"]]],[11,"supervision_timeout","","Returns the connection supervision timeout…",53,[[["self"]],["duration"]]],[11,"connectable_undirected","","Creates a connectable undirected advertising PDU…",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"connectable_directed","","Creates a connectable directed advertising PDU…",54,[[["deviceaddress"]],["self"]]],[11,"nonconnectable_undirected","","Creates a non-connectable undirected advertising PDU…",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scannable_undirected","","Creates a scannable undirected advertising PDU…",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"beacon","","Creates an advertising channel PDU suitable for building a…",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"discoverable","","Creates an advertising PDU that makes this device…",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scan_request","","Creates a scan request PDU.",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scan_response","","Creates a scan response PDU.",54,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"header","","",54,[[["self"]],["header"]]],[11,"payload","","",54,[[["self"]]]],[11,"new","","Creates a new Advertising Channel PDU header specifying…",55,[[["pdutype"]],["self"]]],[11,"parse","","",55,[[],["self"]]],[11,"to_u16","","Returns the raw representation of the header.",55,[[["self"]],["u16"]]],[11,"type_","","Returns the PDU type specified in the header.",55,[[["self"]],["pdutype"]]],[11,"tx_add","","Returns the state of the `TxAdd` field.",55,[[["self"]],["bool"]]],[11,"set_tx_add","","Sets the `TxAdd` field's value.",55,[[["self"],["bool"]]]],[11,"rx_add","","Returns the state of the `RxAdd` field.",55,[[["self"]],["bool"]]],[11,"set_rx_add","","Sets the `RxAdd` field's value.",55,[[["self"],["bool"]]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",55,[[["self"]],["u8"]]],[11,"set_payload_length","","Sets the payload length of this PDU.",55,[[["self"],["u8"]]]],[11,"is_beacon","","Returns whether this PDU type is a beacon advertisement.",52,[[["self"]],["bool"]]],[11,"allows_adv_data","","Whether AD structures can follow the fixed data in a PDU…",52,[[["self"]],["bool"]]],[11,"from_raw","rubble::link","Create a company ID from a raw `u16`.",56,[[["u16"]],["self"]]],[11,"as_u16","","Get the raw `u16` representing this company identifier.",56,[[["self"]],["u16"]]],[11,"name","","Get the full company name from this identifer.",56,[[["self"]],[["option",["str"]],["str"]]]],[11,"connection_interval","","Returns the configured interval between connection events.",57,[[["self"]],["duration"]]],[0,"data","","Data Channel structures.",null,null],[3,"Header","rubble::link::data","16-bit data channel header preceding the payload.",null,null],[4,"Llid","","Values of the LLID field in `Header`.",null,null],[13,"Reserved","","Reserved for future use.",58,null],[13,"DataCont","","Continuation of L2CAP message, or empty PDU.",58,null],[13,"DataStart","","Start of L2CAP message.",58,null],[13,"Control","","LL control PDU.",58,null],[4,"Pdu","","Structured representation of a data channel PDU.",null,null],[13,"DataCont","","Continuation of an L2CAP message (or empty PDU).",59,null],[12,"message","rubble::link::data::Pdu","",60,null],[13,"DataStart","rubble::link::data","Start of an L2CAP message (must not be empty).",59,null],[12,"message","rubble::link::data::Pdu","",61,null],[13,"Control","rubble::link::data","LL Control PDU for controlling the Link-Layer connection.",59,null],[12,"data","rubble::link::data::Pdu","",62,null],[11,"new","rubble::link::data","Creates a header with the given LLID field and all other…",63,[[["llid"]],["self"]]],[11,"parse","","Parses a header from raw bytes.",63,[[],["self"]]],[11,"to_u16","","Returns the raw representation of the header.",63,[[["self"]],["u16"]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",63,[[["self"]],["u8"]]],[11,"set_payload_length","","Sets the payload length field to `len`.",63,[[["self"],["u8"]]]],[11,"llid","","Returns the `LLID` field (PDU type).",63,[[["self"]],["llid"]]],[11,"nesn","","Returns the value of the `NESN` field (Next Expected…",63,[[["self"]],["seqnum"]]],[11,"set_nesn","","Sets the value of the `NESN` field.",63,[[["self"],["seqnum"]]]],[11,"sn","","Returns the value of the `SN` field (Sequence Number).",63,[[["self"]],["seqnum"]]],[11,"set_sn","","Sets the value of the `SN` field.",63,[[["self"],["seqnum"]]]],[11,"md","","Returns whether the `MD` field is set (More Data).",63,[[["self"]],["bool"]]],[11,"set_md","","Sets the value of the `MD` field.",63,[[["self"],["bool"]]]],[11,"empty","","Creates an empty PDU that carries no message.",59,[[],["self"]]],[11,"llid","","Returns the `LLID` field to use for this PDU.",59,[[["self"]],["llid"]]],[11,"parse","","Parses a PDU from a `Header` and raw payload.",59,[[["header"]],[["error"],["result",["error"]]]]],[11,"new","rubble::link","Create a new device address from 6 raw Bytes and an…",64,[[["addresskind"]],["self"]]],[11,"kind","","Returns the address kind.",64,[[["self"]],["addresskind"]]],[11,"is_random","","Returns whether this address is randomly generated.",64,[[["self"]],["bool"]]],[11,"raw","","Returns the raw bytes making up this address.",64,[[["self"]]]],[18,"LE_ENCRYPTION","","Low-Energy data encryption.",65,null],[18,"CONN_PARAM_REQ","","Connection parameters request procedure.",65,null],[18,"EXTENDED_REJECT_INDICATION","","Support for the LL Control PDU `LL_REJECT_IND_EXT`.",65,null],[18,"SLAVE_FEATURE_EXCHANGE","","Slave-initiated feature exchange.",65,null],[18,"LE_PING","","Low-Energy Link-Layer ping exchange.",65,null],[18,"LE_PACKET_LENGTH_EXTENSION","","Link-Layer PDU length update (support for data channel…",65,null],[18,"LL_PRIVACY","","Support for untrackable randomized device addresses (LL…",65,null],[18,"EXT_SCANNER_FILTER_POLICIES","","Extended scan filter policies.",65,null],[11,"empty","","Returns an empty set of flags",65,[[],["featureset"]]],[11,"all","","Returns the set containing all flags.",65,[[],["featureset"]]],[11,"bits","","Returns the raw value of the flags currently stored.",65,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",65,[[["u64"]],[["featureset"],["option",["featureset"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",65,[[["u64"]],["featureset"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",65,[[["u64"]],["featureset"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",65,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",65,[[["self"],["featureset"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",65,[[["self"],["featureset"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",65,[[["self"],["featureset"]]]],[11,"remove","","Removes the specified flags in-place.",65,[[["self"],["featureset"]]]],[11,"toggle","","Toggles the specified flags in-place.",65,[[["self"],["featureset"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",65,[[["self"],["featureset"],["bool"]]]],[11,"supported","","Returns the feature set supported by Rubble.",65,[[],["self"]]],[0,"filter","","Link-Layer Device Filtering.",null,null],[3,"AllowAll","rubble::link::filter","An `AddressFilter` that allows all devices (ie. no…",null,null],[3,"WhitelistFilter","","An `AddressFilter` that checks device addresses against a…",null,null],[3,"AdvFilter","","Advertising filter policy. Governs which devices may scan…",null,null],[3,"ScanFilter","","Scanner filter policy. Governs which devices will be…",null,null],[6,"SliceIter","","",null,null],[6,"SingleIter","","",null,null],[8,"AddressFilter","","",null,null],[10,"matches","","",66,[[["deviceaddress"],["self"]],["bool"]]],[11,"new","","Creates a device whitelist from an iterator yielding the…",67,[[["i"]],["self"]]],[11,"from_slice","","Creates a device whitelist from a slice of device addresses.",67,[[],["self"]]],[11,"from_address","","Creates a device whitelist that will allow a single device.",67,[[["deviceaddress"]],["self"]]],[11,"new","","Creates a new filter policy from behaviors for scan and…",68,[[["c"],["s"]],["self"]]],[11,"may_scan","","",68,[[["deviceaddress"],["self"]],["bool"]]],[11,"may_connect","","",68,[[["deviceaddress"],["self"]],["bool"]]],[11,"new","","Creates a new scanner filter policy from an `AddressFilter`.",69,[[["s"]],["self"]]],[11,"should_scan","","",69,[[["deviceaddress"],["self"]],["bool"]]],[0,"llcp","rubble::link","Defines packet structures used by the Link Layer Control…",null,null],[3,"ConnectionParamRequest","rubble::link::llcp","A connection parameter update request or response…",null,null],[3,"ConnectionUpdateData","","Data transmitted with an `LL_CONNECTION_UPDATE_REQ`…",null,null],[4,"ControlPdu","","A structured representation of an LL Control PDU used by…",null,null],[13,"ConnectionUpdateReq","","`0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection…",70,null],[13,"ChannelMapReq","","`0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.",70,null],[12,"map","rubble::link::llcp::ControlPdu","",71,null],[12,"instant","","",71,null],[13,"TerminateInd","rubble::link::llcp","`0x02`/`LL_TERMINATE_IND` - Close the connection.",70,null],[12,"error_code","rubble::link::llcp::ControlPdu","",72,null],[13,"UnknownRsp","rubble::link::llcp","`0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported…",70,null],[12,"unknown_type","rubble::link::llcp::ControlPdu","Opcode of the unknown PDU.",73,null],[13,"FeatureReq","rubble::link::llcp","`0x08`/`LL_FEATURE_REQ` - Master requests slave's features.",70,null],[12,"features_master","rubble::link::llcp::ControlPdu","Supported feature set of the master.",74,null],[13,"FeatureRsp","rubble::link::llcp","`0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ`…",70,null],[12,"features_used","rubble::link::llcp::ControlPdu","Features that will be used for the connection. Logical…",75,null],[13,"VersionInd","rubble::link::llcp","`0x0C`/`LL_VERSION_IND` - Bluetooth version indication…",70,null],[12,"vers_nr","rubble::link::llcp::ControlPdu","",76,null],[12,"comp_id","","",76,null],[12,"sub_vers_nr","","",76,null],[13,"ConnectionParamReq","rubble::link::llcp","",70,null],[13,"ConnectionParamRsp","","",70,null],[13,"Unknown","","Catch-all variant for unsupported opcodes.",70,null],[12,"opcode","rubble::link::llcp::ControlPdu","The opcode we don't support. This can also be the…",77,null],[12,"ctr_data","","Additional data depending on the opcode.",77,null],[4,"ControlOpcode","rubble::link::llcp","Enumeration of all known LL Control PDU opcodes (not all…",null,null],[13,"ConnectionUpdateReq","","",78,null],[13,"ChannelMapReq","","",78,null],[13,"TerminateInd","","",78,null],[13,"EncReq","","",78,null],[13,"EncRsp","","",78,null],[13,"StartEncReq","","",78,null],[13,"StartEncRsp","","",78,null],[13,"UnknownRsp","","",78,null],[13,"FeatureReq","","",78,null],[13,"FeatureRsp","","",78,null],[13,"PauseEncReq","","",78,null],[13,"PauseEncRsp","","",78,null],[13,"VersionInd","","",78,null],[13,"RejectInd","","",78,null],[13,"SlaveFeatureReq","","",78,null],[13,"ConnectionParamReq","","",78,null],[13,"ConnectionParamRsp","","",78,null],[13,"RejectIndExt","","",78,null],[13,"PingReq","","",78,null],[13,"PingRsp","","",78,null],[13,"LengthReq","","",78,null],[13,"LengthRsp","","",78,null],[13,"Unknown","","",78,null],[4,"VersionNumber","","Enumeration of all possible `VersNr` for `LL_VERSION_IND`…",null,null],[13,"V4_0","","",79,null],[13,"V4_1","","",79,null],[13,"V4_2","","",79,null],[13,"V5_0","","",79,null],[13,"V5_1","","",79,null],[13,"Unknown","","",79,null],[11,"new","","Creates a new connection update request structure filled…",80,[[],["self"]]],[11,"set_conn_interval","","Sets the minimum and maximum requested connection interval.",80,[[["self"],["duration"]]]],[11,"min_conn_interval","","Returns the minimum requested connection interval.",80,[[["self"]],["duration"]]],[11,"max_conn_interval","","Returns the maximum requested connection interval.",80,[[["self"]],["duration"]]],[11,"slave_latency","","Returns the slave latency in number of connection events.",80,[[["self"]],["u16"]]],[11,"supervision_timeout","","Returns the supervision timeout.",80,[[["self"]],["duration"]]],[11,"win_size","","Returns the size of the transmit window for the first PDU…",81,[[["self"]],["duration"]]],[11,"win_offset","","Returns the offset of the transmit window, as a duration…",81,[[["self"]],["duration"]]],[11,"interval","","Returns the duration between connection events.",81,[[["self"]],["duration"]]],[11,"latency","","Returns the slave latency.",81,[[["self"]],["u16"]]],[11,"timeout","","Returns the connection supervision timeout…",81,[[["self"]],["duration"]]],[11,"instant","","Returns the instant at which these changes should take…",81,[[["self"]],["u16"]]],[11,"opcode","","Returns the opcode of this LL Control PDU.",70,[[["self"]],["controlopcode"]]],[11,"encoded_size","","Returns the encoded size of this LLCPDU, including the…",70,[[["self"]],["u8"]]],[0,"queue","rubble::link","An SPSC queue for data channel PDUs.",null,null],[3,"Consume","rubble::link::queue","Bundles a `T` along with information telling a queue…",null,null],[3,"SimpleQueue","","A simple packet queue that can hold a single packet.",null,null],[3,"SimpleProducer","","Producer (writer) half returned by `SimpleQueue::split`.",null,null],[3,"SimpleConsumer","","Consumer (reader) half returned by `SimpleQueue::split`.",null,null],[5,"run_tests","","Runs Rubble's packet queue testsuite against the given…",null,[[]]],[8,"PacketQueue","","A splittable SPSC queue for data channel PDUs.",null,null],[16,"Producer","","Producing (writing) half of the queue.",82,null],[16,"Consumer","","Consuming (reading) half of the queue.",82,null],[10,"split","","Splits the queue into its producing and consuming ends.",82,[[]]],[8,"Producer","","The producing (writing) half of a packet queue.",null,null],[10,"free_space","","Returns the largest payload size that can be successfully…",83,[[["self"]],["u8"]]],[10,"produce_dyn","","Enqueues a PDU with known size using a closure.",83,[[["fnmut"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"produce_with","","Enqueues a PDU with known size using a closure.",83,[[["self"],["u8"]],["result"]]],[8,"Consumer","","The consuming (reading) half of a packet queue.",null,null],[10,"has_data","","Returns whether there is a packet to dequeue.",84,[[["self"]],["bool"]]],[10,"consume_raw_with","","Passes the next raw packet in the queue to a closure.",84,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume_pdu_with","","Passes the next packet in the queue to a closure.",84,[[["self"]],[["result",["error"]],["error"]]]],[11,"new","","Consume the currently processed packet iff `consume` is…",85,[[["result",["error"]],["error"],["bool"]],["self"]]],[11,"always","","Consume the currently processed packet, then return…",85,[[["result",["error"]],["error"]],["self"]]],[11,"never","","Do not consume the currently processed packet, then return…",85,[[["result",["error"]],["error"]],["self"]]],[11,"on_success","","Consume the currently processed packet if `result`…",85,[[["result",["error"]],["error"]],["self"]]],[11,"new","","Creates a new, empty queue.",86,[[],["self"]]],[11,"new","rubble::link","Creates a new packet processor hooked up to data channel…",87,[[["l2capstate"]],["self"]]],[11,"has_work","","Returns `true` when this responder has work to do.",87,[[["self"]],["bool"]]],[11,"process_one","","Processes a single incoming packet in the packet queue.",87,[[["self"]],[["result",["error"]],["error"]]]],[11,"l2cap","","Obtains access to the L2CAP instance.",87,[[["self"]],["l2capstatetx"]]],[17,"CRC_POLY","","The CRC polynomial to use for CRC24 generation.",null,null],[17,"MIN_DATA_PAYLOAD_BUF","","Min. size a data PDU payload buffer must have (assuming…",null,null],[17,"MIN_DATA_PDU_BUF","","Min. size a data PDU buffer must have.",null,null],[17,"MIN_PAYLOAD_BUF","","Min. size a PDU payload buffer must have (to cover both…",null,null],[17,"MIN_PDU_BUF","","Min. size a Link-Layer PDU buffer must have (to cover both…",null,null],[17,"MIN_PACKET_BUF","","Min. size a buffer for Link-Layer packets must have to…",null,null],[8,"Transmitter","","Trait for Link Layer packet transmission.",null,null],[10,"tx_payload_buf","","Get a reference to the Transmitter's PDU payload buffer.",88,[[["self"]]]],[10,"transmit_advertising","","Transmit an Advertising Channel PDU.",88,[[["advertisingchannel"],["self"],["header"]]]],[10,"transmit_data","","Transmit a Data Channel PDU.",88,[[["header"],["u32"],["datachannel"],["self"]]]],[11,"new","","Creates a new Link-Layer.",89,[[["deviceaddress"]],["self"]]],[11,"timer","","Returns a reference to the timer instance used by the…",89,[[["self"]]]],[11,"start_advertise","","Starts advertising this device, optionally sending data…",89,[[["self"],["duration"]],[["error"],["nextupdate"],["result",["nextupdate","error"]]]]],[11,"process_adv_packet","","Process an incoming packet from an advertising channel.",89,[[["instant"],["self"],["header"],["bool"]],["cmd"]]],[11,"process_data_packet","","Process an incoming data channel packet.",89,[[["header"],["instant"],["self"],["bool"]],["cmd"]]],[11,"update_timer","","Update the Link-Layer state after the timer expires.",89,[[["self"]],["cmd"]]],[11,"connection","","Returns a reference to the connection state.",89,[[["self"]],[["connection"],["option",["connection"]]]]],[11,"is_advertising","","Returns whether the Link-Layer is currently broadcasting…",89,[[["self"]],["bool"]]],[11,"is_connected","","Returns whether the Link-Layer is currently connected.",89,[[["self"]],["bool"]]],[0,"phy","rubble","Physical layer interactions.",null,null],[3,"AdvertisingChannel","rubble::phy","One of the three advertising channels (channel indices 37,…",null,null],[3,"DataChannel","","One of 37 data channels on which data channel PDUs are…",null,null],[8,"Radio","","Trait for raw 2.4 GHz non-BLE-specific radios.",null,null],[10,"transmit","","Transmit every Byte in `buf` over the air, LSb first, at…",90,[[["u16"],["self"]]]],[11,"first","","Returns the first (lowest-numbered) advertising channel.",91,[[],["self"]]],[11,"iter_all","","Returns an iterator that yields all 3 advertising channels…",91,[[]]],[11,"cycle","","Returns the next advertising channel, or the first one if…",91,[[["self"]],["self"]]],[11,"rf_channel","","Returns the RF channel corresponding to this advertising…",91,[[["self"]],["u8"]]],[11,"freq","","Returns the center frequency of this channel in MHz.",91,[[["self"]],["u16"]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",91,[[["self"]],["u8"]]],[11,"new","","Creates a `DataChannel` from a raw index.",92,[[["u8"]],["self"]]],[11,"index","","Returns the data channel index.",92,[[["self"]],["u8"]]],[11,"rf_channel","","Returns the RF channel corresponding to this data channel…",92,[[["self"]],["u8"]]],[11,"freq","","Returns the center frequency of this channel in MHz.",92,[[["self"]],["u16"]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",92,[[["self"]],["u8"]]],[0,"security","rubble","The LE Security Manager protocol.",null,null],[3,"NoSecurity","rubble::security","LE Secure Connections are not supported and will not be…",null,null],[3,"SecureConnections","","Indicates support for LE Secure Connections.",null,null],[3,"SecurityManager","","The LE Security Manager.",null,null],[3,"AuthReq","","Authentication requirements exchanged during pairing…",null,null],[3,"KeyDistribution","","Indicates which types of keys a device requests for…",null,null],[4,"IoCapabilities","","Describes the I/O capabilities of a device that can be…",null,null],[13,"DisplayOnly","","Device can display a 6-digit number, but has no input…",93,null],[13,"DisplayYesNo","","Device can display a 6-digit number and the user can input…",93,null],[13,"KeyboardOnly","","Device does not have output capability, but the user can…",93,null],[13,"NoInputNoOutput","","Device has no meaningful input and output capabilities.",93,null],[13,"KeyboardDisplay","","Device can display a 6-digit passcode and allows passcode…",93,null],[13,"Unknown","","",93,null],[4,"BondingType","","Whether to perform bonding in addition to pairing.",null,null],[13,"NoBonding","","No bonding should be performed; the exchanged keys should…",94,null],[13,"Bonding","","Permanently store the exchanged keys to allow resuming…",94,null],[13,"Unknown","","",94,null],[8,"SecurityLevel","","Supported security levels.",null,null],[18,"MTU","","The L2CAP MTU required by this security level.",95,null],[11,"no_security","","",96,[[],["self"]]],[11,"bonding_type","","Returns the requested bonding.",97,[[["self"]],["bondingtype"]]],[11,"set_bonding_type","","",97,[[["bondingtype"],["self"]]]],[11,"mitm","","Returns whether MITM protection is requested.",97,[[["self"]],["bool"]]],[11,"set_mitm","","",97,[[["self"],["bool"]]]],[11,"secure_connection","","Returns whether LE Secure Connection pairing is supported…",97,[[["self"]],["bool"]]],[11,"set_secure_connection","","Sets whether LE Secure Connection pairing is supported and…",97,[[["self"],["bool"]]]],[11,"keypress","","",97,[[["self"]],["bool"]]],[11,"set_keypress","","",97,[[["self"],["bool"]]]],[18,"ENC_KEY","","",98,null],[18,"ID_KEY","","",98,null],[18,"SIGN_KEY","","",98,null],[18,"LINK_KEY","","",98,null],[11,"empty","","Returns an empty set of flags",98,[[],["keydistribution"]]],[11,"all","","Returns the set containing all flags.",98,[[],["keydistribution"]]],[11,"bits","","Returns the raw value of the flags currently stored.",98,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",98,[[["u8"]],[["option",["keydistribution"]],["keydistribution"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",98,[[["u8"]],["keydistribution"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",98,[[["u8"]],["keydistribution"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",98,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",98,[[["self"],["keydistribution"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",98,[[["self"],["keydistribution"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",98,[[["self"],["keydistribution"]]]],[11,"remove","","Removes the specified flags in-place.",98,[[["self"],["keydistribution"]]]],[11,"toggle","","Toggles the specified flags in-place.",98,[[["self"],["keydistribution"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",98,[[["bool"],["self"],["keydistribution"]]]],[0,"time","rubble","Time APIs for obtaining the current time and calculating…",null,null],[3,"Duration","rubble::time","A duration with microsecond resolution.",null,null],[3,"Instant","","A point in time, relative to an unspecfied epoch.",null,null],[8,"Timer","","Trait for time providers.",null,null],[10,"now","","Obtain the current time as an `Instant`.",99,[[["self"]],["instant"]]],[18,"T_IFS","","The duration of the interframe spacing between BLE packets.",100,null],[11,"from_micros","","Creates a `Duration` from a number of microseconds.",100,[[["u32"]],["self"]]],[11,"from_millis","","Creates a `Duration` representing the given number of…",100,[[["u16"]],["self"]]],[11,"from_secs","","Creates a `Duration` representing a number of seconds.",100,[[["u16"]],["self"]]],[11,"whole_secs","","Returns the number of whole seconds that fit in `self`.",100,[[["self"]],["u32"]]],[11,"whole_millis","","Returns the number of whole milliseconds that fit in `self`.",100,[[["self"]],["u32"]]],[11,"as_micros","","Returns the number of microseconds represented by `self`.",100,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of microseconds in `self`.",100,[[["self"]],["u32"]]],[18,"MAX_TIME_BETWEEN","","The maximum time between two `Instant`s that can be…",101,null],[11,"from_raw_micros","","Creates an `Instant` from raw microseconds since an…",101,[[["u32"]],["self"]]],[11,"raw_micros","","Returns the raw value from which this `Instant` was created.",101,[[["self"]],["u32"]]],[11,"duration_since","","Calculates the duration of time that has passed between…",101,[[["self"],["instant"]],["duration"]]],[0,"uuid","rubble","BLE UUIDs (16, 32 or 128 bits).",null,null],[3,"Uuid","rubble::uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Uuid16","","A 16-bit UUID alias.",null,null],[12,"0","","",102,null],[3,"Uuid32","","A 32-bit UUID alias.",null,null],[12,"0","","",103,null],[4,"UuidKind","","List of the supported UUID types.",null,null],[13,"Uuid16","","",104,null],[13,"Uuid32","","",104,null],[13,"Uuid128","","",104,null],[8,"IsUuid","","Marker for UUID types.",null,null],[18,"KIND","","",105,null],[17,"BLUETOOTH_VERSION","rubble","Version of the Bluetooth specification implemented by…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","rubble::att","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"into","","",106,[[],["u"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","rubble::beacon","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","rubble::bytes","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","rubble::gatt","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into_iter","","",107,[[],["i"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"into","","",107,[[],["u"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","rubble::gatt::characteristic","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","rubble::l2cap","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","rubble::link","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"into","","",56,[[],["u"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"into","","",57,[[],["u"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"into","","",89,[[],["u"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","rubble::link::ad_structure","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","rubble::link::advertising","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"into","","",53,[[],["u"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"into","","",54,[[],["u"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"into","","",55,[[],["u"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"into","","",52,[[],["u"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","rubble::link::data","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","rubble::link::filter","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"into","","",108,[[],["u"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"into","","",67,[[],["u"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"into","","",68,[[],["u"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"into","","",69,[[],["u"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","rubble::link::llcp","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"into","","",80,[[],["u"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"into","","",81,[[],["u"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"into","","",78,[[],["u"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"into","","",79,[[],["u"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","rubble::link::queue","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"into","","",86,[[],["u"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"into","","",109,[[],["u"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"into","","",110,[[],["u"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"from","rubble::phy","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"into","","",91,[[],["u"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"into","","",92,[[],["u"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from","rubble::security","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"into","","",111,[[],["u"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"into","","",112,[[],["u"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"into","","",96,[[],["u"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"into","","",97,[[],["u"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"into","","",98,[[],["u"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"into","","",93,[[],["u"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"into","","",94,[[],["u"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"from","rubble::time","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"into","","",100,[[],["u"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"into","","",101,[[],["u"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"from","rubble::uuid","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"into","","",113,[[],["u"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"into","","",102,[[],["u"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"into","","",103,[[],["u"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"partial_cmp","","",113,[[["uuid"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",113,[[["uuid"],["self"]],["bool"]]],[11,"le","","",113,[[["uuid"],["self"]],["bool"]]],[11,"gt","","",113,[[["uuid"],["self"]],["bool"]]],[11,"ge","","",113,[[["uuid"],["self"]],["bool"]]],[11,"fmt","","",113,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"default","","",113,[[],["uuid"]]],[11,"eq","","",113,[[["uuid"],["self"]],["bool"]]],[11,"ne","","",113,[[["uuid"],["self"]],["bool"]]],[11,"clone","","",113,[[["self"]],["uuid"]]],[11,"hash","","",113,[[["self"],["__h"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"cmp","","",113,[[["uuid"],["self"]],["ordering"]]],[11,"from_str","","",113,[[["str"]],[["result",["uuid"]],["uuid"]]]],[11,"for_attrs_in_range","rubble::att","",106,[[["handlerange"],["self"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",106,[[["attuuid"],["self"]],["bool"]]],[11,"group_end","","",106,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"for_attrs_in_range","rubble::gatt","",21,[[["handlerange"],["self"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",21,[[["attuuid"],["self"]],["bool"]]],[11,"group_end","","",21,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"for_attrs_in_range","","",22,[[["handlerange"],["self"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",22,[[["attuuid"],["self"]],["bool"]]],[11,"group_end","","",22,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"to_bytes","rubble::att","",3,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",2,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::bytes","",13,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::l2cap","",26,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::ad_structure","Lowers this AD structure into a Byte buffer.",38,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",41,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::advertising","",55,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::data","",59,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link","",65,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::llcp","",80,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",70,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::uuid","",102,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",103,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",113,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"from_bytes","rubble::att","",3,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",2,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::bytes","",13,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",13,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::l2cap","",26,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::ad_structure","",38,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",41,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::advertising","",43,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",53,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",55,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link","",65,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::llcp","",80,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",70,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::uuid","",102,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",103,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",113,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"lookup","rubble::l2cap","",28,[[["self"],["channel"]],[["channeldata",["protocolobj"]],["option",["channeldata"]]]]],[11,"att","","",28,[[["self"]],[["attributeserver"],["channeldata",["attributeserver"]]]]],[11,"process_message","rubble::att","",5,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[11,"process_message","rubble::security","",96,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[11,"matches","rubble::link::filter","",108,[[["deviceaddress"],["self"]],["bool"]]],[11,"matches","","",67,[[["deviceaddress"],["self"]],["bool"]]],[11,"free_space","rubble::link::queue","",109,[[["self"]],["u8"]]],[11,"produce_dyn","","",109,[[["fnmut"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"has_data","","",110,[[["self"]],["bool"]]],[11,"consume_raw_with","","",110,[[["self"]],[["result",["error"]],["error"]]]],[11,"deref","rubble::l2cap","",31,[[["self"]]]],[11,"deref_mut","","",31,[[["self"]]]],[11,"from","rubble::att","",2,[[["uuid16"]],["self"]]],[11,"from","","",2,[[["uuid32"]],["self"]]],[11,"from","","",2,[[["uuid"]],["self"]]],[11,"from","rubble::bytes","",13,[[["t"]],["self"]]],[11,"from","rubble::link::ad_structure","",38,[[["flags"]],["self"]]],[11,"from","rubble::link::advertising","",52,[[["u8"]],["self"]]],[11,"from","rubble::link::data","",59,[[["controlpdu"]],["self"]]],[11,"from","rubble::link::llcp","",78,[[["u8"]],["self"]]],[11,"from","","",79,[[["u8"]],["self"]]],[11,"from","rubble::security","",93,[[["u8"]],["self"]]],[11,"from","","",94,[[["u8"]],["self"]]],[11,"from","rubble::uuid","",103,[[["uuid16"]],["self"]]],[11,"fmt","rubble::att","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::bytes","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::l2cap","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::advertising","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::data","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::llcp","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::queue","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::phy","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::time","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::uuid","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::time","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"sub","rubble::gatt::characteristic","Returns the set difference of the two sets of flags.",19,[[["properties"]],["properties"]]],[11,"sub","rubble::link::ad_structure","Returns the set difference of the two sets of flags.",42,[[["flags"]],["flags"]]],[11,"sub","rubble::link","Returns the set difference of the two sets of flags.",65,[[["featureset"]],["featureset"]]],[11,"sub","rubble::security","Returns the set difference of the two sets of flags.",98,[[["keydistribution"]],["keydistribution"]]],[11,"sub","rubble::time","",100,[[],["self"]]],[11,"sub","","",100,[[["self"]],["self"]]],[11,"sub","","",101,[[],["duration"]]],[11,"sub","","",101,[[["duration"]],["self"]]],[11,"eq","rubble::att","",3,[[["self"],["handle"]],["bool"]]],[11,"ne","","",3,[[["self"],["handle"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"eq","","",2,[[["uuid16"],["self"]],["bool"]]],[11,"eq","","",2,[[["uuid"],["self"]],["bool"]]],[11,"eq","rubble","",0,[[["error"],["self"]],["bool"]]],[11,"eq","rubble::gatt::characteristic","",19,[[["properties"],["self"]],["bool"]]],[11,"ne","","",19,[[["properties"],["self"]],["bool"]]],[11,"eq","","",17,[[["appearance"],["self"]],["bool"]]],[11,"eq","rubble::l2cap","",26,[[["channel"],["self"]],["bool"]]],[11,"ne","","",26,[[["channel"],["self"]],["bool"]]],[11,"eq","rubble::link::ad_structure","",42,[[["flags"],["self"]],["bool"]]],[11,"ne","","",42,[[["flags"],["self"]],["bool"]]],[11,"eq","rubble::link::advertising","",52,[[["pdutype"],["self"]],["bool"]]],[11,"ne","","",52,[[["pdutype"],["self"]],["bool"]]],[11,"eq","rubble::link::data","",58,[[["llid"],["self"]],["bool"]]],[11,"eq","rubble::link","",33,[[["self"],["addresskind"]],["bool"]]],[11,"eq","","",64,[[["deviceaddress"],["self"]],["bool"]]],[11,"ne","","",64,[[["deviceaddress"],["self"]],["bool"]]],[11,"eq","","",65,[[["featureset"],["self"]],["bool"]]],[11,"ne","","",65,[[["featureset"],["self"]],["bool"]]],[11,"eq","rubble::link::llcp","",78,[[["self"],["controlopcode"]],["bool"]]],[11,"ne","","",78,[[["self"],["controlopcode"]],["bool"]]],[11,"eq","","",79,[[["self"],["versionnumber"]],["bool"]]],[11,"ne","","",79,[[["self"],["versionnumber"]],["bool"]]],[11,"eq","rubble::phy","",92,[[["self"],["datachannel"]],["bool"]]],[11,"ne","","",92,[[["self"],["datachannel"]],["bool"]]],[11,"eq","rubble::security","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"ne","","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"eq","rubble::time","",100,[[["self"],["duration"]],["bool"]]],[11,"ne","","",100,[[["self"],["duration"]],["bool"]]],[11,"eq","rubble::uuid","",102,[[["uuid16"],["self"]],["bool"]]],[11,"ne","","",102,[[["uuid16"],["self"]],["bool"]]],[11,"eq","","",103,[[["uuid32"],["self"]],["bool"]]],[11,"ne","","",103,[[["uuid32"],["self"]],["bool"]]],[11,"cmp","rubble::gatt::characteristic","",19,[[["properties"],["self"]],["ordering"]]],[11,"cmp","rubble::link::ad_structure","",42,[[["flags"],["self"]],["ordering"]]],[11,"cmp","rubble::link","",65,[[["featureset"],["self"]],["ordering"]]],[11,"cmp","rubble::security","",98,[[["self"],["keydistribution"]],["ordering"]]],[11,"cmp","rubble::time","",100,[[["self"],["duration"]],["ordering"]]],[11,"partial_cmp","rubble::gatt::characteristic","",19,[[["properties"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",19,[[["properties"],["self"]],["bool"]]],[11,"le","","",19,[[["properties"],["self"]],["bool"]]],[11,"gt","","",19,[[["properties"],["self"]],["bool"]]],[11,"ge","","",19,[[["properties"],["self"]],["bool"]]],[11,"partial_cmp","rubble::link::ad_structure","",42,[[["flags"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",42,[[["flags"],["self"]],["bool"]]],[11,"le","","",42,[[["flags"],["self"]],["bool"]]],[11,"gt","","",42,[[["flags"],["self"]],["bool"]]],[11,"ge","","",42,[[["flags"],["self"]],["bool"]]],[11,"partial_cmp","rubble::link","",65,[[["featureset"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",65,[[["featureset"],["self"]],["bool"]]],[11,"le","","",65,[[["featureset"],["self"]],["bool"]]],[11,"gt","","",65,[[["featureset"],["self"]],["bool"]]],[11,"ge","","",65,[[["featureset"],["self"]],["bool"]]],[11,"partial_cmp","rubble::security","",98,[[["self"],["keydistribution"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"le","","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"gt","","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"ge","","",98,[[["self"],["keydistribution"]],["bool"]]],[11,"partial_cmp","rubble::time","",100,[[["self"],["duration"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",100,[[["self"],["duration"]],["bool"]]],[11,"le","","",100,[[["self"],["duration"]],["bool"]]],[11,"gt","","",100,[[["self"],["duration"]],["bool"]]],[11,"ge","","",100,[[["self"],["duration"]],["bool"]]],[11,"add","","",100,[[],["self"]]],[11,"add","","",100,[[["self"]],["self"]]],[11,"add","","",101,[[["duration"]],["self"]]],[11,"add_assign","","",100,[[["self"]]]],[11,"add_assign","","",101,[[["self"],["duration"]]]],[11,"sub_assign","rubble::gatt::characteristic","Disables all flags enabled in the set.",19,[[["self"],["properties"]]]],[11,"sub_assign","rubble::link::ad_structure","Disables all flags enabled in the set.",42,[[["self"],["flags"]]]],[11,"sub_assign","rubble::link","Disables all flags enabled in the set.",65,[[["self"],["featureset"]]]],[11,"sub_assign","rubble::security","Disables all flags enabled in the set.",98,[[["self"],["keydistribution"]]]],[11,"sub_assign","rubble::time","",100,[[["self"]]]],[11,"sub_assign","","",101,[[["self"],["duration"]]]],[11,"not","rubble::gatt::characteristic","Returns the complement of this set of flags.",19,[[],["properties"]]],[11,"not","rubble::link::ad_structure","Returns the complement of this set of flags.",42,[[],["flags"]]],[11,"not","rubble::link","Returns the complement of this set of flags.",65,[[],["featureset"]]],[11,"not","rubble::security","Returns the complement of this set of flags.",98,[[],["keydistribution"]]],[11,"bitand","rubble::gatt::characteristic","Returns the intersection between the two sets of flags.",19,[[["properties"]],["properties"]]],[11,"bitand","rubble::link::ad_structure","Returns the intersection between the two sets of flags.",42,[[["flags"]],["flags"]]],[11,"bitand","rubble::link","Returns the intersection between the two sets of flags.",65,[[["featureset"]],["featureset"]]],[11,"bitand","rubble::security","Returns the intersection between the two sets of flags.",98,[[["keydistribution"]],["keydistribution"]]],[11,"bitor","rubble::gatt::characteristic","Returns the union of the two sets of flags.",19,[[["properties"]],["properties"]]],[11,"bitor","rubble::link::ad_structure","Returns the union of the two sets of flags.",42,[[["flags"]],["flags"]]],[11,"bitor","rubble::link","Returns the union of the two sets of flags.",65,[[["featureset"]],["featureset"]]],[11,"bitor","rubble::security","Returns the union of the two sets of flags.",98,[[["keydistribution"]],["keydistribution"]]],[11,"bitxor","rubble::gatt::characteristic","Returns the left flags, but with all the right flags…",19,[[["properties"]],["properties"]]],[11,"bitxor","rubble::link::ad_structure","Returns the left flags, but with all the right flags…",42,[[["flags"]],["flags"]]],[11,"bitxor","rubble::link","Returns the left flags, but with all the right flags…",65,[[["featureset"]],["featureset"]]],[11,"bitxor","rubble::security","Returns the left flags, but with all the right flags…",98,[[["keydistribution"]],["keydistribution"]]],[11,"bitand_assign","rubble::gatt::characteristic","Disables all flags disabled in the set.",19,[[["self"],["properties"]]]],[11,"bitand_assign","rubble::link::ad_structure","Disables all flags disabled in the set.",42,[[["self"],["flags"]]]],[11,"bitand_assign","rubble::link","Disables all flags disabled in the set.",65,[[["self"],["featureset"]]]],[11,"bitand_assign","rubble::security","Disables all flags disabled in the set.",98,[[["self"],["keydistribution"]]]],[11,"bitor_assign","rubble::gatt::characteristic","Adds the set of flags.",19,[[["self"],["properties"]]]],[11,"bitor_assign","rubble::link::ad_structure","Adds the set of flags.",42,[[["self"],["flags"]]]],[11,"bitor_assign","rubble::link","Adds the set of flags.",65,[[["self"],["featureset"]]]],[11,"bitor_assign","rubble::security","Adds the set of flags.",98,[[["self"],["keydistribution"]]]],[11,"bitxor_assign","rubble::gatt::characteristic","Toggles the set of flags.",19,[[["self"],["properties"]]]],[11,"bitxor_assign","rubble::link::ad_structure","Toggles the set of flags.",42,[[["self"],["flags"]]]],[11,"bitxor_assign","rubble::link","Toggles the set of flags.",65,[[["self"],["featureset"]]]],[11,"bitxor_assign","rubble::security","Toggles the set of flags.",98,[[["self"],["keydistribution"]]]],[11,"hash","rubble::gatt::characteristic","",19,[[["self"],["__h"]]]],[11,"hash","rubble::l2cap","",26,[[["self"],["__h"]]]],[11,"hash","rubble::link::ad_structure","",42,[[["self"],["__h"]]]],[11,"hash","rubble::link","",65,[[["self"],["__h"]]]],[11,"hash","rubble::security","",98,[[["self"],["__h"]]]],[11,"next","rubble::gatt","",107,[[["self"]],[["attribute"],["option",["attribute"]]]]],[11,"extend","rubble::gatt::characteristic","",19,[[["self"],["intoiterator"]]]],[11,"extend","rubble::link::ad_structure","",42,[[["self"],["intoiterator"]]]],[11,"extend","rubble::link","",65,[[["self"],["intoiterator"]]]],[11,"extend","rubble::security","",98,[[["self"],["intoiterator"]]]],[11,"from_iter","rubble::gatt::characteristic","",19,[[["intoiterator"]],["properties"]]],[11,"from_iter","rubble::link::ad_structure","",42,[[["intoiterator"]],["flags"]]],[11,"from_iter","rubble::link","",65,[[["intoiterator"]],["featureset"]]],[11,"from_iter","rubble::security","",98,[[["intoiterator"]],["keydistribution"]]],[11,"into","rubble::att","",2,[[],["uuid"]]],[11,"into","rubble::uuid","",102,[[],["uuid"]]],[11,"into","","",103,[[],["uuid"]]],[11,"fmt","rubble::gatt::characteristic","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",98,[[["self"],["formatter"]],["result"]]],[11,"clone","rubble::att","",3,[[["self"]],["handle"]]],[11,"clone","","",2,[[["self"]],["attuuid"]]],[11,"clone","rubble::bytes","",13,[[["self"]],["self"]]],[11,"clone","rubble::gatt::characteristic","",19,[[["self"]],["properties"]]],[11,"clone","","",17,[[["self"]],["appearance"]]],[11,"clone","rubble::l2cap","",26,[[["self"]],["channel"]]],[11,"clone","rubble::link::ad_structure","",38,[[["self"]],["adstructure"]]],[11,"clone","","",41,[[["self"]],["serviceuuids"]]],[11,"clone","","",42,[[["self"]],["flags"]]],[11,"clone","rubble::link::advertising","",43,[[["self"]],["pdu"]]],[11,"clone","","",53,[[["self"]],["connectrequestdata"]]],[11,"clone","","",51,[[["self"]],["sleepclockaccuracy"]]],[11,"clone","","",55,[[["self"]],["header"]]],[11,"clone","rubble::link","",56,[[["self"]],["companyid"]]],[11,"clone","rubble::link::data","",63,[[["self"]],["header"]]],[11,"clone","","",58,[[["self"]],["llid"]]],[11,"clone","rubble::link","",33,[[["self"]],["addresskind"]]],[11,"clone","","",64,[[["self"]],["deviceaddress"]]],[11,"clone","","",65,[[["self"]],["featureset"]]],[11,"clone","rubble::link::llcp","",80,[[["self"]],["connectionparamrequest"]]],[11,"clone","","",81,[[["self"]],["connectionupdatedata"]]],[11,"clone","","",70,[[["self"]],["controlpdu"]]],[11,"clone","","",78,[[["self"]],["controlopcode"]]],[11,"clone","","",79,[[["self"]],["versionnumber"]]],[11,"clone","rubble::link","",32,[[["self"]],["cmd"]]],[11,"clone","","",34,[[["self"]],["nextupdate"]]],[11,"clone","","",35,[[["self"]],["radiocmd"]]],[11,"clone","rubble::phy","",91,[[["self"]],["advertisingchannel"]]],[11,"clone","","",92,[[["self"]],["datachannel"]]],[11,"clone","rubble::security","",93,[[["self"]],["iocapabilities"]]],[11,"clone","","",97,[[["self"]],["authreq"]]],[11,"clone","","",94,[[["self"]],["bondingtype"]]],[11,"clone","","",98,[[["self"]],["keydistribution"]]],[11,"clone","rubble::time","",100,[[["self"]],["duration"]]],[11,"clone","","",101,[[["self"]],["instant"]]],[11,"clone","rubble::uuid","",102,[[["self"]],["uuid16"]]],[11,"clone","","",103,[[["self"]],["uuid32"]]],[11,"clone","","",104,[[["self"]],["uuidkind"]]],[11,"nil","","The 'nil UUID'.",113,[[],["uuid"]]],[11,"from_fields","","Creates a UUID from four field values in big-endian order.",113,[[["u16"],["u32"]],[["uuid"],["error"],["result",["uuid","error"]]]]],[11,"from_fields_le","","Creates a UUID from four field values in little-endian…",113,[[["u16"],["u32"]],[["uuid"],["error"],["result",["uuid","error"]]]]],[11,"from_u128","","Creates a UUID from a 128bit value in big-endian order.",113,[[["u128"]],["uuid"]]],[11,"from_u128_le","","Creates a UUID from a 128bit value in little-endian order.",113,[[["u128"]],["uuid"]]],[11,"from_slice","","Creates a UUID using the supplied big-endian bytes.",113,[[],[["uuid"],["error"],["result",["uuid","error"]]]]],[11,"from_bytes","","Creates a UUID using the supplied big-endian bytes.",113,[[],["uuid"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with…",113,[[["str"]],[["uuid"],["error"],["result",["uuid","error"]]]]],[11,"to_hyphenated","","Get a [`Hyphenated`] formatter.",113,[[],["hyphenated"]]],[11,"to_hyphenated_ref","","Get a borrowed [`HyphenatedRef`] formatter.",113,[[["self"]],["hyphenatedref"]]],[11,"to_simple","","Get a [`Simple`] formatter.",113,[[],["simple"]]],[11,"to_simple_ref","","Get a borrowed [`SimpleRef`] formatter.",113,[[["self"]],["simpleref"]]],[11,"to_urn","","Get a [`Urn`] formatter.",113,[[],["urn"]]],[11,"to_urn_ref","","Get a borrowed [`UrnRef`] formatter.",113,[[["self"]],["urnref"]]],[18,"NAMESPACE_DNS","","UUID namespace for Domain Name System (DNS).",113,null],[18,"NAMESPACE_OID","","UUID namespace for ISO Object Identifiers (OIDs).",113,null],[18,"NAMESPACE_URL","","UUID namespace for Uniform Resource Locators (URLs).",113,null],[18,"NAMESPACE_X500","","UUID namespace for X.500 Distinguished Names (DNs).",113,null],[11,"get_variant","","Returns the variant of the UUID structure.",113,[[["self"]],[["variant"],["option",["variant"]]]]],[11,"get_version_num","","Returns the version number of the UUID.",113,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the UUID.",113,[[["self"]],[["version"],["option",["version"]]]]],[11,"as_fields","","Returns the four field values of the UUID in big-endian…",113,[[["self"]]]],[11,"to_fields_le","","Returns the four field values of the UUID in little-endian…",113,[[["self"]]]],[11,"as_u128","","Returns a 128bit value containing the UUID data.",113,[[["self"]],["u128"]]],[11,"to_u128_le","","Returns a 128bit little-endian value containing the UUID…",113,[[["self"]],["u128"]]],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",113,[[["self"]]]],[11,"is_nil","","Tests if the UUID is nil.",113,[[["self"]],["bool"]]],[11,"encode_buffer","","A buffer that can be used for `encode_...` calls, that is…",113,[[]]]],"p":[[4,"Error"],[3,"Attribute"],[4,"AttUuid"],[3,"Handle"],[3,"HandleRange"],[3,"AttributeServer"],[3,"AttributeServerTx"],[8,"AttributeProvider"],[8,"ScanCallback"],[3,"Beacon"],[3,"BeaconScanner"],[8,"ToBytes"],[8,"FromBytes"],[3,"BytesOr"],[3,"ByteWriter"],[3,"ByteReader"],[8,"Config"],[4,"Appearance"],[8,"Characteristic"],[3,"Properties"],[3,"BatteryLevel"],[3,"BatteryServiceAttrs"],[3,"MidiServiceAttrs"],[8,"ChannelMapper"],[8,"ProtocolObj"],[8,"Protocol"],[3,"Channel"],[3,"ChannelData"],[3,"BleChannelMap"],[3,"L2CAPState"],[3,"Sender"],[3,"L2CAPStateTx"],[3,"Cmd"],[4,"AddressKind"],[4,"NextUpdate"],[4,"RadioCmd"],[13,"ListenAdvertising"],[13,"ListenData"],[4,"AdStructure"],[13,"ServiceData16"],[13,"Unknown"],[3,"ServiceUuids"],[3,"Flags"],[4,"Pdu"],[13,"ConnectableUndirected"],[13,"ConnectableDirected"],[13,"NonconnectableUndirected"],[13,"ScannableUndirected"],[13,"ScanRequest"],[13,"ScanResponse"],[13,"ConnectRequest"],[4,"SleepClockAccuracy"],[4,"PduType"],[3,"ConnectRequestData"],[3,"PduBuf"],[3,"Header"],[3,"CompanyId"],[3,"Connection"],[4,"Llid"],[4,"Pdu"],[13,"DataCont"],[13,"DataStart"],[13,"Control"],[3,"Header"],[3,"DeviceAddress"],[3,"FeatureSet"],[8,"AddressFilter"],[3,"WhitelistFilter"],[3,"AdvFilter"],[3,"ScanFilter"],[4,"ControlPdu"],[13,"ChannelMapReq"],[13,"TerminateInd"],[13,"UnknownRsp"],[13,"FeatureReq"],[13,"FeatureRsp"],[13,"VersionInd"],[13,"Unknown"],[4,"ControlOpcode"],[4,"VersionNumber"],[3,"ConnectionParamRequest"],[3,"ConnectionUpdateData"],[8,"PacketQueue"],[8,"Producer"],[8,"Consumer"],[3,"Consume"],[3,"SimpleQueue"],[3,"Responder"],[8,"Transmitter"],[3,"LinkLayer"],[8,"Radio"],[3,"AdvertisingChannel"],[3,"DataChannel"],[4,"IoCapabilities"],[4,"BondingType"],[8,"SecurityLevel"],[3,"SecurityManager"],[3,"AuthReq"],[3,"KeyDistribution"],[8,"Timer"],[3,"Duration"],[3,"Instant"],[3,"Uuid16"],[3,"Uuid32"],[4,"UuidKind"],[8,"IsUuid"],[3,"NoAttributes"],[3,"Attributes"],[3,"AllowAll"],[3,"SimpleProducer"],[3,"SimpleConsumer"],[3,"NoSecurity"],[3,"SecureConnections"],[3,"Uuid"]]};
searchIndex["rubble_nrf5x"] = {"doc":"A Rubble BLE driver for the nRF51/nRF52-series radios.","i":[[0,"radio","rubble_nrf5x","Integrated 2.4 GHz radio with BLE support.",null,null],[3,"BleRadio","rubble_nrf5x::radio","An interface to the nRF radio in BLE mode.",null,null],[6,"PacketBuffer","","A packet buffer that can hold header and payload of any…",null,null],[11,"new","","Initializes the radio in BLE mode and takes ownership of…",0,[[["ficr"],["radio"],["packetbuffer"]],["self"]]],[11,"state","","Returns the current radio state.",0,[[["self"]],["stater"]]],[11,"configure_receiver","","Configures the Radio for (not) receiving data according to…",0,[[["radiocmd"],["self"]]]],[11,"recv_interrupt","","Call this when the `RADIO` interrupt fires.",0,[[["instant"],["self"],["linklayer"]],[["option",["cmd"]],["cmd"]]]],[0,"timer","rubble_nrf5x","Generic `Timer` implementation that works with all 3…",null,null],[3,"BleTimer","rubble_nrf5x::timer","Implements Rubble's `Timer` trait for the timers on the…",null,null],[3,"StampSource","","A timer interface that only allows reading the current…",null,null],[8,"NrfTimerExt","","Extension trait implemented for the nRF timer peripherals.",null,null],[10,"duplicate","","",1,[[["self"]],["self"]]],[10,"init","","Initialize the timer so that it counts at a rate of 1 MHz.",1,[[["self"]]]],[10,"set_interrupt","","Configures the timer's interrupt to fire at the given…",1,[[["instant"],["self"]]]],[10,"clear_interrupt","","Disables or acknowledges this timer's interrupt.",1,[[["self"]]]],[10,"is_pending","","Returns whether a timer interrupt is currently pending.",1,[[["self"]],["bool"]]],[10,"now","","Obtains the current time as an `Instant`.",1,[[["self"]],["instant"]]],[11,"init","","Initializes the timer.",2,[[["t"]],["self"]]],[11,"configure_interrupt","","Configures the timer interrupt to fire according to `next`.",2,[[["nextupdate"],["self"]]]],[11,"is_interrupt_pending","","Checks whether this timer's interrupt is pending.",2,[[["self"]],["bool"]]],[11,"clear_interrupt","","Clears a pending interrupt and disables generation of…",2,[[["self"]]]],[11,"inner","","Provides access to the raw peripheral. Use with caution.",2,[[["self"]],["t"]]],[11,"create_stamp_source","","Creates a new `StampSource` using this timer.",2,[[["self"]],["stampsource"]]],[11,"from","rubble_nrf5x::radio","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","rubble_nrf5x::timer","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"tx_payload_buf","rubble_nrf5x::radio","",0,[[["self"]]]],[11,"transmit_advertising","","",0,[[["self"],["header"],["advertisingchannel"]]]],[11,"transmit_data","","",0,[[["u32"],["header"],["datachannel"],["self"]]]],[11,"now","rubble_nrf5x::timer","",2,[[["self"]],["instant"]]],[11,"now","","",3,[[["self"]],["instant"]]]],"p":[[3,"BleRadio"],[8,"NrfTimerExt"],[3,"BleTimer"],[3,"StampSource"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);